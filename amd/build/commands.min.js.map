{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_draw plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2024 Aniket Kumar <aniketkj9211@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getButtonImage } from \"editor_tiny/utils\";\n// import {get_string as getString} from 'core/str';\nimport { component, icon, buttonName } from \"./common\";\nimport Config from \"core/config\";\n\n// function loadScript(url) {\n//     return new Promise((resolve, reject) => {\n//         var script = document.createElement('script');\n//         script.type = 'text/javascript';\n//         script.src = url;\n//         script.onload = resolve;\n//         script.onerror = reject;\n        // document.head.appendChild(script);\n//     });\n// }\n\nfunction loadScript(url) {\n  return new Promise((resolve, reject) => {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onload = () => {\n      console.log(`Successfully loaded: ${url}`);\n      resolve();\n    };\n    script.onerror = () => {\n      console.error(`Failed to load script: ${url}`);\n      reject(new Error(`Failed to load script: ${url}`));\n    };\n    document.body.appendChild(script); // Appending to the body instead of the head\n  });\n}\n\nfunction loadCSS(url) {\n  return new Promise((resolve, reject) => {\n    var link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = url;\n    link.onload = resolve;\n    link.onerror = reject;\n    document.head.appendChild(link);\n  });\n}\n\nasync function loadChemDoodleComponents() {\n  try {\n    await loadScript(\n      `${Config.wwwroot}/lib/editor/tiny/plugins/draw/lib/ChemDoodle/install/ChemDoodleWeb.js`\n    );\n\n    await loadCSS(\n      `${Config.wwwroot}/lib/editor/tiny/plugins/draw/lib/ChemDoodle/install/ChemDoodleWeb.css`\n    );\n\n    await loadCSS(\n      `${Config.wwwroot}/lib/editor/tiny/plugins/draw/lib/ChemDoodle/install/is/jquery-ui-1.11.4.css`\n    );\n\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for 1 second\n\n    await loadScript(\n      `${Config.wwwroot}/lib/editor/tiny/plugins/draw/lib/ChemDoodle/install/is/ChemDoodleWeb-uis.js`\n    );\n\n    console.log(\"All ChemDoodle components loaded successfully\");\n  } catch (error) {\n    console.error(\"Failed to load ChemDoodle components:\", error);\n  }\n}\n\nconst insertChemicalStructure = (editor, sketcher) => {\n  // let molFile = sketcher.getMolecule().toMol();\n  let imageData = sketcher.canvas.toDataURL(\"image/png\");\n  editor.insertContent(`<img src=\"${imageData}\" />`);\n};\n\nconst openChemDoodleModal = (editor) => {\n  editor.windowManager.open({\n    title: \"Draw Chemical Structure\",\n    body: {\n      type: \"panel\",\n      items: [\n        {\n          type: \"htmlpanel\", // Use htmlpanel or iframe to embed ChemDoodle\n          html: '<div id=\"chemdoodle-draw\" style=\"width: 800px; height: 400px;\"></div>',\n        },\n      ],\n    },\n    buttons: [\n      {\n        type: \"cancel\",\n        text: \"Close\",\n      },\n      {\n        type: \"submit\",\n        text: \"Insert\",\n        primary: true,\n      },\n    ],\n    onSubmit: function (api) {\n      insertChemicalStructure(editor);\n      api.close();\n    },\n    onPostRender: function () {\n      // Initialize ChemDoodle after the modal is displayed\n      // let sketcher = new ChemDoodle.SketcherCanvas('chemdoodle-draw', 500, 300);\n      let sketcher = new ChemDoodle.SketcherCanvas(\n          800,\n          300,\n        \"chemdoodle-draw\",\n        { useServices: true }\n        \n      );\n      sketcher.repaint();\n    },\n  });\n};\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst handleAction = (editor) => {\n  // Check if ChemDoodle is already loaded or not\n  if (typeof ChemDoodle === \"undefined\") {\n    loadChemDoodleComponents(() => {\n      openChemDoodleModal(editor);\n    });\n  } else {\n    openChemDoodleModal(editor);\n  }\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\n\nexport const getSetup = async () => {\n  const buttonImage = await getButtonImage(\"icon\", component);\n\n  return (editor) => {\n    // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n    editor.ui.registry.addIcon(icon, buttonImage.html);\n\n    // Add a button to the toolbar\n    editor.ui.registry.addButton(buttonName, {\n      tooltip: buttonName,\n      icon: icon,\n      onAction: () => handleAction(editor),\n    });\n\n    // Add an item to the menubar\n    editor.ui.registry.addMenuItem(buttonName, {\n      icon,\n      text: buttonName,\n      context: \"tools\",\n      onAction: () => handleAction(editor),\n    });\n  };\n};\n"],"names":["loadScript","url","Promise","resolve","reject","script","document","createElement","type","src","onload","console","log","onerror","error","Error","body","appendChild","loadCSS","link","rel","href","head","openChemDoodleModal","editor","windowManager","open","title","items","html","buttons","text","primary","onSubmit","api","sketcher","imageData","canvas","toDataURL","insertContent","insertChemicalStructure","close","onPostRender","ChemDoodle","SketcherCanvas","useServices","repaint","handleAction","Config","wwwroot","setTimeout","loadChemDoodleComponents","async","buttonImage","component","ui","registry","addIcon","icon","addButton","buttonName","tooltip","onAction","addMenuItem","context"],"mappings":";;;;;;;cAuCSA,WAAWC,YACX,IAAIC,SAAQ,CAACC,QAASC,cACvBC,OAASC,SAASC,cAAc,UACpCF,OAAOG,KAAO,kBACdH,OAAOI,IAAMR,IACbI,OAAOK,OAAS,KACdC,QAAQC,IAAK,wBAAuBX,OACpCE,WAEFE,OAAOQ,QAAU,KACfF,QAAQG,MAAO,0BAAyBb,OACxCG,OAAO,IAAIW,MAAO,0BAAyBd,SAE7CK,SAASU,KAAKC,YAAYZ,oBAIrBa,QAAQjB,YACR,IAAIC,SAAQ,CAACC,QAASC,cACvBe,KAAOb,SAASC,cAAc,QAClCY,KAAKC,IAAM,aACXD,KAAKE,KAAOpB,IACZkB,KAAKT,OAASP,QACdgB,KAAKN,QAAUT,OACfE,SAASgB,KAAKL,YAAYE,wJAoCxBI,oBAAuBC,SAC3BA,OAAOC,cAAcC,KAAK,CACxBC,MAAO,0BACPX,KAAM,CACJR,KAAM,QACNoB,MAAO,CACL,CACEpB,KAAM,YACNqB,KAAM,2EAIZC,QAAS,CACP,CACEtB,KAAM,SACNuB,KAAM,SAER,CACEvB,KAAM,SACNuB,KAAM,SACNC,SAAS,IAGbC,SAAU,SAAUC,KA7BQ,EAACV,OAAQW,gBAEnCC,UAAYD,SAASE,OAAOC,UAAU,aAC1Cd,OAAOe,cAAe,aAAYH,kBA2B9BI,CAAwBhB,QACxBU,IAAIO,SAENC,aAAc,WAGG,IAAIC,WAAWC,eAC1B,IACA,IACF,kBACA,CAAEC,aAAa,IAGRC,cAUTC,aAAgBvB,SAEM,oBAAfmB,sCA/EH3C,WACH,GAAEgD,gBAAOC,sFAGN/B,QACH,GAAE8B,gBAAOC,uFAGN/B,QACH,GAAE8B,gBAAOC,6FAGN,IAAI/C,SAASC,SAAY+C,WAAW/C,QAAS,aAE7CH,WACH,GAAEgD,gBAAOC,uFAGZtC,QAAQC,IAAI,iDACZ,MAAOE,OACPH,QAAQG,MAAM,wCAAyCA,QA4DvDqC,GAIA5B,oBAAoBC,2BAaA4B,gBAChBC,kBAAoB,yBAAe,OAAQC,0BAEzC9B,SAENA,OAAO+B,GAAGC,SAASC,QAAQC,aAAML,YAAYxB,MAG7CL,OAAO+B,GAAGC,SAASG,UAAUC,mBAAY,CACvCC,QAASD,mBACTF,KAAMA,aACNI,SAAU,IAAMf,aAAavB,UAI/BA,OAAO+B,GAAGC,SAASO,YAAYH,mBAAY,CACzCF,KAAAA,aACA3B,KAAM6B,mBACNI,QAAS,QACTF,SAAU,IAAMf,aAAavB"}