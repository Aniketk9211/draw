{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny tiny_draw for Moodle.\n *\n * @module      plugintype_pluginname/plugin\n * @copyright   2024 Aniket Kumar <aniketkj9211@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport {getTinyMCE} from 'editor_tiny/loader';\nimport {getPluginMetadata} from 'editor_tiny/utils';\n\nimport {component, pluginName} from './common';\nimport {getSetup as getCommandSetup} from './commands';\nimport * as Configuration from './configuration';\n\n\n// Asynchronously initialize the plugin configuration and setup\n/**\n * Initializes the TinyMCE plugin with configurations and command setups.\n * This function handles the asynchronous loading of necessary TinyMCE configurations\n * and setups the plugin with the editor.\n *\n * @async\n * @returns {Promise<[string, object]>} A promise that resolves to the plugin name and its configuration.\n */\nasync function initPlugin() {\n    const [tinyMCE, pluginMetadata, setupCommands] = await Promise.all([\n        getTinyMCE(),\n        getPluginMetadata(component, pluginName),\n        getCommandSetup(),  // Make sure this is awaited correctly\n    ]);\n\n    // Function to add the plugin to TinyMCE's PluginManager\n    tinyMCE.PluginManager.add(pluginName, (editor) => {\n        // Setup commands such as buttons, menu items, etc.\n        console.log(\"Setting up commands...\");  // remove\n        console.log(\"setupCommands is:\", setupCommands); //remove\n\n        setupCommands(editor);\n\n        // Return the pluginMetadata object, used by TinyMCE for the help link\n        return pluginMetadata;\n    });\n\n    return [pluginName, Configuration];\n}\n\n// Export the initialized plugin\nexport default initPlugin();\n\n\n\n\n\n\n\n\n// // Setup the tiny_draw Plugin.\n// export default new Promise(async(resolve) => {\n//     // Note: The PluginManager.add function does not support asynchronous configuration.\n//     // Perform any asynchronous configuration here, and then call the PluginManager.add function.\n//     const [\n//         tinyMCE,\n//         pluginMetadata,\n//         setupCommands,\n//     ] = await Promise.all([\n//         getTinyMCE(),\n//         getPluginMetadata(component, pluginName),\n//         getCommandSetup(),\n//     ]);\n\n//     // Reminder: Any asynchronous code must be run before this point.\n//     tinyMCE.PluginManager.add(pluginName, (editor) => {\n//         // Setup any commands such as buttons, menu items, and so on.\n//         setupCommands(editor);\n\n//         // Return the pluginMetadata object. This is used by TinyMCE to display a help link for your plugin.\n//         return pluginMetadata;\n//     });\n\n//     resolve([pluginName, Configuration]);\n// });\n\n"],"names":["tinyMCE","pluginMetadata","setupCommands","Promise","all","component","pluginName","PluginManager","add","editor","console","log","Configuration","initPlugin"],"mappings":";;;;;;;yDA0CWA,QAASC,eAAgBC,qBAAuBC,QAAQC,IAAI,EAC/D,yBACA,4BAAkBC,kBAAWC,qBAC7B,iCAIJN,QAAQO,cAAcC,IAAIF,oBAAaG,SAEnCC,QAAQC,IAAI,0BACZD,QAAQC,IAAI,oBAAqBT,eAEjCA,cAAcO,QAGPR,kBAGJ,CAACK,mBAAYM,eAITC"}